{"ast":null,"code":"import _objectSpread from\"/Users/youneskhelil/Desktop/findar-backoffice-school/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import ReactDOM from\"react-dom\";import{Admin,Resource,fetchUtils}from\"react-admin\";import jsonServerProvider from\"ra-data-json-server\";import dataProvider from'./dataProvider';var dataProviderWrapper={getList:function getList(resource,params){console.log(resource);console.log(\"PARAMS ARE : \");console.log(params);if(resource==\"checkpoint\"){return dataProvider.getList(resource,params).then(function(result){/**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */var newData=[];result.data.forEach(function(record){newData.push({id:record._id,name:record.name,building:record.building,checkpointType:record.checkpointType,floor:record.floor,neighbors:record.neighbors,school:record.location.school,country:record.location.country,city:record.location.city});});console.log(\"Data returned from data provider in getList:\");console.log(JSON.stringify(newData,null,8));return{data:newData,total:newData.length};});}else if(resource==\"user\"){return dataProvider.getList(resource,params).then(function(result){/**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */var newData=[];result.data.forEach(function(record){newData.push({id:record._id,email:record.email,school:record.school,role:record.role});});console.log(\"ressource =====\");console.log(resource);console.log(\"Data returned from data provider in getList:\");console.log(JSON.stringify(newData,null,8));return{data:newData,total:newData.length};});}},getMany:function getMany(resource,params){return dataProvider.getMany(resource,params);},updateMany:function updateMany(resource,params){return dataProvider.updateMany(resource,params);},create:function create(resource,params){console.log(\"param de create :\");console.log(params);resource=resource+\"/signup\";return dataProvider.create(resource,params);},delete:function _delete(resource,params){return dataProvider.delete(resource,params);},deleteMany:function deleteMany(resource,params){return dataProvider.deleteMany(resource,params);},getManyReference:function getManyReference(resource,params){var _params$pagination=params.pagination,page=_params$pagination.page,perPage=_params$pagination.perPage;var _params$sort=params.sort,field=_params$sort.field,order=_params$sort.order;var query={sort:JSON.stringify([field,order]),range:JSON.stringify([(page-1)*perPage,page*perPage-1]),filter:JSON.stringify(_objectSpread(_objectSpread({},params.filter),{},{[params.target]:params.id}))};var apiUrl=\"https://findar-api-staging.herokuapp.com\";var url=\"\".concat(apiUrl,\"/\").concat(resource);//const url = `${apiUrl}/${resource}?floor=2`;\nreturn dataProvider.httpClient(url).then(function(_ref){var headers=_ref.headers,json=_ref.json;return{zebi:json,total:parseInt(headers.get('content-range').split('/').pop(),10)};});},getOne:function getOne(resource,params){console.log(\"LES PARAMETRE de GETONE SONT \");console.log(params);if(resource==\"user\"&&params.hasOwnProperty('id')){resource=resource+\"/profile\";}return dataProvider.getOne(resource,params).then(function(result){var location=[];var newData={id:result.data._id,email:result.data.email,school:result.data.school};console.log(\"Data returned from data provider in getoooooooooOne:\");console.log(JSON.stringify(newData,null,8));return{data:newData};});},update:function update(resource,params){console.log(\"SA REEEENTRE\");console.log(\"Data provided by react-admin to data provider:\");console.log(JSON.stringify(params,null,8));resource=resource+\"/profile\";return dataProvider.update(resource,params);}};export default dataProviderWrapper;","map":{"version":3,"sources":["/Users/youneskhelil/Desktop/findar-backoffice-school/src/Resources/dataProviderWrapper.js"],"names":["React","ReactDOM","Admin","Resource","fetchUtils","jsonServerProvider","dataProvider","dataProviderWrapper","getList","resource","params","console","log","then","result","newData","data","forEach","record","push","id","_id","name","building","checkpointType","floor","neighbors","school","location","country","city","JSON","stringify","total","length","email","role","getMany","updateMany","create","delete","deleteMany","getManyReference","pagination","page","perPage","sort","field","order","query","range","filter","target","apiUrl","url","httpClient","headers","json","zebi","parseInt","get","split","pop","getOne","hasOwnProperty","update"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Admin, Resource, fetchUtils } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport dataProvider from './dataProvider';\n\n\nconst dataProviderWrapper = {\n  getList: (resource, params) => {\n    console.log(resource)\n    console.log(\"PARAMS ARE : \")\n    console.log(params)\n    if (resource == \"checkpoint\")\n    {\n        return dataProvider.getList(resource, params).then(result => {\n          /**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */\n          const newData = [];\n          result.data.forEach(record => {\n            newData.push({\n              id: record._id,\n              name: record.name,\n              building: record.building,\n              checkpointType: record.checkpointType,\n              floor: record.floor,\n              neighbors: record.neighbors,\n              school: record.location.school,\n              country: record.location.country,\n              city: record.location.city\n            });\n          });\n          console.log(`Data returned from data provider in getList:`);\n          console.log(JSON.stringify(newData, null, 8));\n          return { data: newData, total: newData.length };\n        });\n    }\n    else if (resource == \"user\")\n    {\n        return dataProvider.getList(resource, params).then(result => {\n          /**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */\n          const newData = [];\n          result.data.forEach(record => {\n            newData.push({\n              id: record._id,\n              email: record.email,\n              school: record.school,\n              role: record.role\n            });\n          });\n          console.log(\"ressource =====\")\n          console.log(resource)\n          console.log(`Data returned from data provider in getList:`);\n          console.log(JSON.stringify(newData, null, 8));\n          return { data: newData, total: newData.length };\n        });\n    }\n  },\n  getMany: (resource, params) => dataProvider.getMany(resource, params),\n  updateMany: (resource, params) => dataProvider.updateMany(resource, params),\n  create: (resource, params) => {\n    console.log(\"param de create :\");\n    console.log(params);\n    resource = resource + \"/signup\"\n    return dataProvider.create(resource, params)\n  },\n  delete: (resource, params) => dataProvider.delete(resource, params),\n  deleteMany: (resource, params) => dataProvider.deleteMany(resource, params),\n\n\n\n\n\n\n\n      getManyReference: (resource, params) => {\n          const { page, perPage } = params.pagination;\n          const { field, order } = params.sort;\n          const query = {\n              sort: JSON.stringify([field, order]),\n              range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n              filter: JSON.stringify({\n                  ...params.filter,\n                  [params.target]: params.id,\n              }),\n          };\n          const apiUrl = \"https://findar-api-staging.herokuapp.com\"\n          const url = `${apiUrl}/${resource}`;\n          //const url = `${apiUrl}/${resource}?floor=2`;\n\n          return dataProvider.httpClient(url).then(({ headers, json }) => ({\n              zebi: json,\n              total: parseInt(headers.get('content-range').split('/').pop(), 10),\n          }));\n      },\n  getOne: (resource, params) => {\n    console.log(\"LES PARAMETRE de GETONE SONT \")\n    console.log(params)\n    if (resource == \"user\" && params.hasOwnProperty('id') )\n    {  resource = resource + \"/profile\"  }\n    return dataProvider.getOne(resource, params).then(result => {\n      const location = [];\n      const newData = {\n        id: result.data._id,\n        email: result.data.email,\n        school: result.data.school,\n      };\n      console.log(`Data returned from data provider in getoooooooooOne:`);\n      console.log(JSON.stringify(newData, null, 8));\n      return { data: newData };\n    });\n  },\n  update: (resource, params) => {\n    console.log(\"SA REEEENTRE\")\n    console.log(\"Data provided by react-admin to data provider:\");\n    console.log(JSON.stringify(params, null, 8));\n    resource = resource + \"/profile\"\n    return dataProvider.update(resource, params);\n  }\n};\n\nexport default dataProviderWrapper;\n"]},"metadata":{},"sourceType":"module"}