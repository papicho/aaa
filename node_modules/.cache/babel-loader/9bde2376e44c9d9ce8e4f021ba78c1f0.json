{"ast":null,"code":"import _regeneratorRuntime from \"/Users/youneskhelil/Desktop/findar-backoffice-school/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/youneskhelil/Desktop/findar-backoffice-school/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// in src/authProvider.js\nexport default {\n  // called when the user attempts to log in\n  login: function () {\n    var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var username, password, request, fn;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              username = _ref.username, password = _ref.password;\n              request = new Request('https://findar-api-staging.herokuapp.com/user/login', {\n                method: 'POST',\n                body: JSON.stringify({\n                  email: username,\n                  password\n                }),\n                headers: new Headers({\n                  'Content-Type': 'application/json'\n                })\n              });\n              console.log(username);\n              console.log(password);\n              fn = username.match(/First Name:\\s*(.+)\\s+Last Name/i)[1]; //localStorage.setItem('fn', fn);\n\n              return _context.abrupt(\"return\", fetch(request).then(function (response) {\n                if (response.status < 200 || response.status >= 300) {\n                  throw new Error(response.statusText);\n                }\n\n                return response.json();\n              }).then(function (_ref2) {\n                var token = _ref2.token;\n                localStorage.setItem('token', token);\n                console.log(token);\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function login(_x) {\n      return _login.apply(this, arguments);\n    }\n\n    return login;\n  }(),\n  // called when the user clicks on the logout button\n  logout: function logout() {\n    localStorage.removeItem('username');\n    localStorage.removeItem('token');\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: function checkError(_ref3) {\n    var status = _ref3.status;\n\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: function checkAuth() {\n    return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: function getPermissions() {\n    return Promise.resolve();\n  }\n};","map":{"version":3,"sources":["/Users/youneskhelil/Desktop/findar-backoffice-school/src/Resources/authProvider.js"],"names":["login","username","password","request","Request","method","body","JSON","stringify","email","headers","Headers","console","log","fn","match","fetch","then","response","status","Error","statusText","json","token","localStorage","setItem","logout","removeItem","Promise","resolve","checkError","reject","checkAuth","getItem","getPermissions"],"mappings":";;AACA;AACA,eAAe;AACX;AACAA,EAAAA,KAAK;AAAA,0EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,QAAT,QAASA,QAAT,EAAmBC,QAAnB,QAAmBA,QAAnB;AACGC,cAAAA,OADH,GACa,IAAIC,OAAJ,CAAY,qDAAZ,EAAmE;AAC/EC,gBAAAA,MAAM,EAAE,MADuE;AAE/EC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,kBAAAA,KAAK,EAAER,QAAT;AAAmBC,kBAAAA;AAAnB,iBAAf,CAFyE;AAG/EQ,gBAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,kCAAgB;AAAlB,iBAAZ;AAHsE,eAAnE,CADb;AAOHC,cAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AACAW,cAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACIY,cAAAA,EATD,GASOb,QAAQ,CAACc,KAAT,CAAe,iCAAf,CAAD,CAAoD,CAApD,CATN,EAUH;;AAVG,+CAWIC,KAAK,CAACb,OAAD,CAAL,CACFc,IADE,CACG,UAAAC,QAAQ,EAAI;AACd,oBAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,wBAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACH;;AACD,uBAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,eANE,EAOFL,IAPE,CAOG,iBAAe;AAAA,oBAAZM,KAAY,SAAZA,KAAY;AACjBC,gBAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AAEAX,gBAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AAEH,eAZE,CAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAFM;AA4BX;AACAG,EAAAA,MAAM,EAAE,kBAAM;AACVF,IAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACAH,IAAAA,YAAY,CAACG,UAAb,CAAwB,OAAxB;AAEA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GAlCU;AAmCX;AACAC,EAAAA,UAAU,EAAE,2BAAgB;AAAA,QAAbX,MAAa,SAAbA,MAAa;;AACxB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCK,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACA,aAAOC,OAAO,CAACG,MAAR,EAAP;AACH;;AACD,WAAOH,OAAO,CAACC,OAAR,EAAP;AACH,GA1CU;AA2CX;AACAG,EAAAA,SAAS,EAAE,qBAAM;AACb,WAAOR,YAAY,CAACS,OAAb,CAAqB,OAArB,IACDL,OAAO,CAACC,OAAR,EADC,GAEDD,OAAO,CAACG,MAAR,EAFN;AAGH,GAhDU;AAiDX;AACAG,EAAAA,cAAc,EAAE;AAAA,WAAMN,OAAO,CAACC,OAAR,EAAN;AAAA;AAlDL,CAAf","sourcesContent":["\n// in src/authProvider.js\nexport default {\n    // called when the user attempts to log in\n    login: async ({ username, password }) => {\n        const request = new Request('https://findar-api-staging.herokuapp.com/user/login', {\n            method: 'POST',\n            body: JSON.stringify({ email: username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        });\n\n        console.log(username);\n        console.log(password);\n        var fn = (username.match(/First Name:\\s*(.+)\\s+Last Name/i))[1]\n        //localStorage.setItem('fn', fn);\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(({ token }) => {\n                localStorage.setItem('token', token);\n\n                console.log(token);\n\n            });\n\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('token');\n\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('token')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};\n"]},"metadata":{},"sourceType":"module"}