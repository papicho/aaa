{"ast":null,"code":"import _objectSpread from \"/Users/youneskhelil/Desktop/findar-backoffice-school/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Admin, Resource, fetchUtils } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport dataProvider from './dataProvider';\nvar dataProviderWrapper = {\n  getList: function getList(resource, params) {\n    console.log(\"FN =\");\n    console.log(localStorage.getItem('username'));\n    emailUser = localStorage.getItem('username'); //userSchool = emailUser.split('.')\n\n    console.log(resource);\n    console.log(\"PARAMS ARE : \");\n    console.log(params);\n\n    if (resource == \"checkpoint\") {\n      return dataProvider.getList(resource, params).then(function (result) {\n        /**\n         * filtering data to only return only certain fields\n         * imagine I have a custom data provider that runs on top of graphql\n         * and only returns certain fields in getList\n         */\n        var newData = [];\n        result.data.forEach(function (record) {\n          newData.push({\n            id: record._id,\n            name: record.name,\n            building: record.building,\n            checkpointType: record.checkpointType,\n            floor: record.floor,\n            neighbors: record.neighbors,\n            school: record.location.school,\n            country: record.location.country,\n            city: record.location.city\n          });\n        });\n        console.log(\"Data returned from data provider in getList:\");\n        console.log(JSON.stringify(newData, null, 8));\n        return {\n          data: newData,\n          total: newData.length\n        };\n      });\n    } else if (resource == \"user\") {\n      return dataProvider.getList(resource, params).then(function (result) {\n        /**\n         * filtering data to only return only certain fields\n         * imagine I have a custom data provider that runs on top of graphql\n         * and only returns certain fields in getList\n         */\n        var newData = [];\n        result.data.forEach(function (record) {\n          newData.push({\n            id: record._id,\n            email: record.email,\n            school: record.school,\n            role: record.role\n          });\n        });\n        console.log(\"ressource =====\");\n        console.log(resource);\n        console.log(\"Data returned from data provider in getList:\");\n        console.log(JSON.stringify(newData, null, 8));\n        return {\n          data: newData,\n          total: newData.length\n        };\n      });\n    }\n  },\n  getMany: function getMany(resource, params) {\n    return dataProvider.getMany(resource, params);\n  },\n  updateMany: function updateMany(resource, params) {\n    return dataProvider.updateMany(resource, params);\n  },\n  create: function create(resource, params) {\n    if (resource == \"checkpoint\") {\n      if (params.hasOwnProperty('location')) {\n        console.log(\"OUAIS ELLE LA LOCATION!!!\");\n      }\n\n      console.log(\"sa rentre dans create check point avec les params suivant\");\n      console.log(params);\n      console.log(\"jessaie de creer un checkpoint et mes params sont :\");\n      console.log(JSON.stringify(params, null, 8));\n    } else if (resource == \"user\") {\n      resource = resource + \"/signup\";\n    }\n\n    console.log(\"param de create :\");\n    console.log(params);\n    return dataProvider.create(resource, params);\n  },\n  delete: function _delete(resource, params) {\n    return dataProvider.delete(resource, params);\n  },\n  deleteMany: function deleteMany(resource, params) {\n    return dataProvider.deleteMany(resource, params);\n  },\n  getManyReference: function getManyReference(resource, params) {\n    var _params$pagination = params.pagination,\n        page = _params$pagination.page,\n        perPage = _params$pagination.perPage;\n    var _params$sort = params.sort,\n        field = _params$sort.field,\n        order = _params$sort.order;\n    var query = {\n      sort: JSON.stringify([field, order]),\n      range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n      filter: JSON.stringify(_objectSpread(_objectSpread({}, params.filter), {}, {\n        [params.target]: params.id\n      }))\n    };\n    var apiUrl = \"https://findar-api-staging.herokuapp.com\";\n    var url = \"\".concat(apiUrl, \"/\").concat(resource); //const url = `${apiUrl}/${resource}?floor=2`;\n\n    return dataProvider.httpClient(url).then(function (_ref) {\n      var headers = _ref.headers,\n          json = _ref.json;\n      return {\n        zebi: json,\n        total: parseInt(headers.get('content-range').split('/').pop(), 10)\n      };\n    });\n  },\n  getOne: function getOne(resource, params) {\n    if (params.id) {\n      console.log(\"LES PARAMETRE de GETONE SONT \");\n      console.log(params);\n\n      if (resource == \"user\" && params.hasOwnProperty('id')) {\n        resource = resource + \"/profile\";\n      } else if (resource == \"checkpoint\" && params.hasOwnProperty('id')) {\n        resource = resource;\n      }\n\n      return dataProvider.getOne(resource, params).then(function (result) {\n        var location = [];\n        var newData = {\n          id: result.data._id,\n          email: result.data.email,\n          school: result.data.school\n        };\n        console.log(\"Data returned from data provider in getoooooooooOne:\");\n        console.log(JSON.stringify(newData, null, 8));\n        return {\n          data: newData\n        };\n      });\n    }\n  },\n  update: function update(resource, params) {\n    console.log(\"SA REEEENTRE\");\n    console.log(\"Data provided by react-admin to data provider:\");\n    console.log(JSON.stringify(params, null, 8));\n    resource = resource + \"/profile\";\n    return dataProvider.update(resource, params);\n  }\n};\nexport default dataProviderWrapper;","map":{"version":3,"sources":["/Users/youneskhelil/Desktop/findar-backoffice-school/src/Resources/dataProviderWrapper.js"],"names":["React","ReactDOM","Admin","Resource","fetchUtils","jsonServerProvider","dataProvider","dataProviderWrapper","getList","resource","params","console","log","localStorage","getItem","emailUser","then","result","newData","data","forEach","record","push","id","_id","name","building","checkpointType","floor","neighbors","school","location","country","city","JSON","stringify","total","length","email","role","getMany","updateMany","create","hasOwnProperty","delete","deleteMany","getManyReference","pagination","page","perPage","sort","field","order","query","range","filter","target","apiUrl","url","httpClient","headers","json","zebi","parseInt","get","split","pop","getOne","update"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Admin, Resource, fetchUtils } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport dataProvider from './dataProvider';\n\n\nconst dataProviderWrapper = {\n  getList: (resource, params) => {\n    console.log(\"FN =\")\n    console.log(localStorage.getItem('username'))\n    emailUser = localStorage.getItem('username')\n    //userSchool = emailUser.split('.')\n    console.log(resource)\n    console.log(\"PARAMS ARE : \")\n    console.log(params)\n    if (resource == \"checkpoint\")\n    {\n        return dataProvider.getList(resource, params).then(result => {\n          /**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */\n          const newData = [];\n          result.data.forEach(record => {\n            newData.push({\n              id: record._id,\n              name: record.name,\n              building: record.building,\n              checkpointType: record.checkpointType,\n              floor: record.floor,\n              neighbors: record.neighbors,\n              school: record.location.school,\n              country: record.location.country,\n              city: record.location.city\n            });\n          });\n          console.log(`Data returned from data provider in getList:`);\n          console.log(JSON.stringify(newData, null, 8));\n          return { data: newData, total: newData.length };\n        });\n    }\n    else if (resource == \"user\")\n    {\n        return dataProvider.getList(resource, params).then(result => {\n          /**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */\n          const newData = [];\n          result.data.forEach(record => {\n            newData.push({\n              id: record._id,\n              email: record.email,\n              school: record.school,\n              role: record.role\n            });\n          });\n          console.log(\"ressource =====\")\n          console.log(resource)\n          console.log(`Data returned from data provider in getList:`);\n          console.log(JSON.stringify(newData, null, 8));\n          return { data: newData, total: newData.length };\n        });\n    }\n  },\n  getMany: (resource, params) => dataProvider.getMany(resource, params),\n  updateMany: (resource, params) => dataProvider.updateMany(resource, params),\n  create: (resource, params) => {\n    if (resource == \"checkpoint\")\n {\n    if (params.hasOwnProperty('location')) {console.log(\"OUAIS ELLE LA LOCATION!!!\")}\n      console.log(\"sa rentre dans create check point avec les params suivant\")\n      console.log(params)\n\n   console.log(\"jessaie de creer un checkpoint et mes params sont :\")\n   console.log(JSON.stringify(params, null, 8))\n\n }\n else if (resource == \"user\")\n{\n  resource = resource + \"/signup\"\n}\n    console.log(\"param de create :\");\n    console.log(params);\n    return dataProvider.create(resource, params)\n  },\n  delete: (resource, params) => dataProvider.delete(resource, params),\n  deleteMany: (resource, params) => dataProvider.deleteMany(resource, params),\n\n\n\n\n\n\n\n      getManyReference: (resource, params) => {\n          const { page, perPage } = params.pagination;\n          const { field, order } = params.sort;\n          const query = {\n              sort: JSON.stringify([field, order]),\n              range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n              filter: JSON.stringify({\n                  ...params.filter,\n                  [params.target]: params.id,\n              }),\n          };\n          const apiUrl = \"https://findar-api-staging.herokuapp.com\"\n          const url = `${apiUrl}/${resource}`;\n          //const url = `${apiUrl}/${resource}?floor=2`;\n\n          return dataProvider.httpClient(url).then(({ headers, json }) => ({\n              zebi: json,\n              total: parseInt(headers.get('content-range').split('/').pop(), 10),\n          }));\n      },\n  getOne: (resource, params) => {\n    if (params.id) {\n\n\n    console.log(\"LES PARAMETRE de GETONE SONT \")\n    console.log(params)\n    if (resource == \"user\" && params.hasOwnProperty('id') )\n    {  resource = resource + \"/profile\"  }\n    else if (resource == \"checkpoint\" && params.hasOwnProperty('id') )\n    {  resource = resource}\n\n    return dataProvider.getOne(resource, params).then(result => {\n      const location = [];\n\n      const newData = {\n        id: result.data._id,\n        email: result.data.email,\n        school: result.data.school,\n      };\n      console.log(`Data returned from data provider in getoooooooooOne:`);\n      console.log(JSON.stringify(newData, null, 8));\n      return { data: newData };\n    });\n    }\n  },\n  update: (resource, params) => {\n    console.log(\"SA REEEENTRE\")\n    console.log(\"Data provided by react-admin to data provider:\");\n    console.log(JSON.stringify(params, null, 8));\n    resource = resource + \"/profile\"\n    return dataProvider.update(resource, params);\n  }\n};\n\nexport default dataProviderWrapper;\n"]},"metadata":{},"sourceType":"module"}