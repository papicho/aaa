{"ast":null,"code":"import _objectSpread from \"/Users/youneskhelil/Desktop/findar-backoffice-school/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Admin, Resource, fetchUtils } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport dataProvider from './dataProvider';\nvar dataProviderWrapper = {\n  getList: function getList(resource, params) {\n    console.log(\"FN =\"); //console.log(localStorage.getItem('username'))\n    //var emailUser = localStorage.getItem('username')\n    //var userSchool = emailUser.split('.')\n    //localStorage.setItem(\"fn\", userSchool[0])\n    //var schoolName = userSchool[1].split('@')\n    //localStorage.setItem('schoolName', schoolName[1])\n    //console.log(schoolName[1])\n\n    console.log(resource);\n    console.log(\"PARAMS ARE : \");\n    console.log(params);\n\n    if (resource === \"checkpoint\") {\n      return dataProvider.getList(resource, params).then(function (result) {\n        /**\n         * filtering data to only return only certain fields\n         * imagine I have a custom data provider that runs on top of graphql\n         * and only returns certain fields in getList\n         */\n        var newData = [];\n        result.data.forEach(function (record) {\n          console.log(\"record location school :\");\n          console.log(record.location.school); //if (record.location.school.toLowerCase() == localStorage.getItem('schoolName').toLowerCase()) {\n\n          newData.push({\n            id: record._id,\n            name: record.name,\n            building: record.building,\n            checkpointType: record.checkpointType,\n            floor: record.floor,\n            neighbors: record.neighbors,\n            school: record.location.school,\n            country: record.location.country,\n            city: record.location.city\n          }); //}\n        });\n        console.log(\"Data returned from data provider in getList:\");\n        console.log(JSON.stringify(newData, null, 8));\n        return {\n          data: newData,\n          total: newData.length\n        };\n      });\n    } else if (resource === \"user\") {\n      return dataProvider.getList(resource, params).then(function (result) {\n        /**\n         * filtering data to only return only certain fields\n         * imagine I have a custom data provider that runs on top of graphql\n         * and only returns certain fields in getList\n         */\n        var newData = [];\n        result.data.forEach(function (record) {\n          var email = localStorage.getItem(\"username\");\n          var name = email.substring(0, email.lastIndexOf(\"@\"));\n          var domain = email.substring(email.lastIndexOf(\"@\") + 1);\n          var fullname = name.split(\".\");\n          var fn = fullname[0];\n          var ln = fullname[1];\n          var loginSchool0 = domain.split(\"@\");\n          var loginSchool = loginSchool0[0];\n          console.log(\"dans getlist ressource user avec comme email:\");\n          console.log(email); //var tmp = record.school;\n          //  if (tmp == .toLowerCase()) {\n\n          var n = record.school.includes(loginSchool);\n\n          if (n) {\n            newData.push({\n              id: record._id,\n              email: record.email,\n              school: record.school,\n              role: record.role\n            });\n          }\n        });\n        console.log(\"ressource =====\");\n        console.log(resource);\n        console.log(\"Data returned from data provider in getList:\");\n        console.log(JSON.stringify(newData, null, 8));\n        return {\n          data: newData,\n          total: newData.length\n        };\n      });\n    }\n  },\n  getMany: function getMany(resource, params) {\n    return dataProvider.getMany(resource, params);\n  },\n  updateMany: function updateMany(resource, params) {\n    return dataProvider.updateMany(resource, params);\n  },\n  create: function create(resource, params) {\n    if (resource === \"checkpoint\") {\n      //if (params.hasOwnProperty('location')) {console.log(\"OUAIS ELLE LA LOCATION!!!\")}\n      console.log(\"sa rentre dans create check point avec les params suivant\");\n      console.log(params);\n      console.log(\"jessaie de creer un checkpoint et mes params sont :\");\n      console.log(JSON.stringify(params, null, 8));\n    } else if (resource === \"user\") {\n      resource = resource + \"/signup\";\n    }\n\n    console.log(\"param de create :\");\n    console.log(params);\n    return dataProvider.create(resource, params);\n  },\n  delete: function _delete(resource, params) {\n    return dataProvider.delete(resource, params);\n  },\n  deleteMany: function deleteMany(resource, params) {\n    return dataProvider.deleteMany(resource, params);\n  },\n  getManyReference: function getManyReference(resource, params) {\n    var _params$pagination = params.pagination,\n        page = _params$pagination.page,\n        perPage = _params$pagination.perPage;\n    var _params$sort = params.sort,\n        field = _params$sort.field,\n        order = _params$sort.order;\n    var query = {\n      sort: JSON.stringify([field, order]),\n      range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n      filter: JSON.stringify(_objectSpread(_objectSpread({}, params.filter), {}, {\n        [params.target]: params.id\n      }))\n    };\n    var apiUrl = \"https://findar-api-staging.herokuapp.com\";\n    var url = \"\".concat(apiUrl, \"/\").concat(resource); //const url = `${apiUrl}/${resource}?floor=2`;\n\n    return dataProvider.httpClient(url).then(function (_ref) {\n      var headers = _ref.headers,\n          json = _ref.json;\n      return {\n        zebi: json,\n        total: parseInt(headers.get('content-range').split('/').pop(), 10)\n      };\n    });\n  },\n  getOne: function getOne(resource, params) {\n    if (params.id) {\n      console.log(\"LES PARAMETRE de GETONE SONT \");\n      console.log(params);\n\n      if (resource === \"user\" && params.hasOwnProperty('id')) {\n        resource = resource + \"/profile\";\n      } //else if (resource == \"checkpoint\" && params.hasOwnProperty('id') )\n      //{  resource = resource}\n\n\n      return dataProvider.getOne(resource, params).then(function (result) {\n        var newData = {\n          id: result.data._id,\n          email: result.data.email,\n          school: result.data.school\n        };\n        console.log(\"Data returned from data provider in getoooooooooOne:\");\n        console.log(JSON.stringify(newData, null, 8));\n        return {\n          data: newData\n        };\n      });\n    }\n  },\n  update: function update(resource, params) {\n    console.log(\"SA REEEENTRE\");\n    console.log(\"Data provided by react-admin to data provider:\");\n    console.log(JSON.stringify(params, null, 8));\n    resource = resource + \"/profile\";\n    return dataProvider.update(resource, params);\n  }\n};\nexport default dataProviderWrapper;","map":{"version":3,"sources":["/Users/youneskhelil/Desktop/findar-backoffice-school/src/Resources/dataProviderWrapper.js"],"names":["React","ReactDOM","Admin","Resource","fetchUtils","jsonServerProvider","dataProvider","dataProviderWrapper","getList","resource","params","console","log","then","result","newData","data","forEach","record","location","school","push","id","_id","name","building","checkpointType","floor","neighbors","country","city","JSON","stringify","total","length","email","localStorage","getItem","substring","lastIndexOf","domain","fullname","split","fn","ln","loginSchool0","loginSchool","n","includes","role","getMany","updateMany","create","delete","deleteMany","getManyReference","pagination","page","perPage","sort","field","order","query","range","filter","target","apiUrl","url","httpClient","headers","json","zebi","parseInt","get","pop","getOne","hasOwnProperty","update"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Admin, Resource, fetchUtils } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport dataProvider from './dataProvider';\n\n\nconst dataProviderWrapper = {\n  getList: (resource, params) => {\n    console.log(\"FN =\")\n    //console.log(localStorage.getItem('username'))\n    //var emailUser = localStorage.getItem('username')\n    //var userSchool = emailUser.split('.')\n    //localStorage.setItem(\"fn\", userSchool[0])\n    //var schoolName = userSchool[1].split('@')\n    //localStorage.setItem('schoolName', schoolName[1])\n    //console.log(schoolName[1])\n    console.log(resource)\n    console.log(\"PARAMS ARE : \")\n    console.log(params)\n    if (resource === \"checkpoint\")\n    {\n        return dataProvider.getList(resource, params).then(result => {\n          /**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */\n          const newData = [];\n          result.data.forEach(record => {\n            console.log(\"record location school :\")\n            console.log(record.location.school)\n            //if (record.location.school.toLowerCase() == localStorage.getItem('schoolName').toLowerCase()) {\n\n            newData.push({\n              id: record._id,\n              name: record.name,\n              building: record.building,\n              checkpointType: record.checkpointType,\n              floor: record.floor,\n              neighbors: record.neighbors,\n              school: record.location.school,\n              country: record.location.country,\n              city: record.location.city\n            });\n          //}\n\n          });\n          console.log(`Data returned from data provider in getList:`);\n          console.log(JSON.stringify(newData, null, 8));\n          return { data: newData, total: newData.length };\n        });\n    }\n    else if (resource === \"user\")\n    {\n        return dataProvider.getList(resource, params).then(result => {\n          /**\n           * filtering data to only return only certain fields\n           * imagine I have a custom data provider that runs on top of graphql\n           * and only returns certain fields in getList\n           */\n          const newData = [];\n          result.data.forEach(record => {\n            let email = localStorage.getItem(\"username\")\n            var name   = email.substring(0, email.lastIndexOf(\"@\"));\n            var domain = email.substring(email.lastIndexOf(\"@\") +1);\n            let fullname = name.split(\".\")\n            let fn = fullname[0]\n            let ln = fullname[1]\n            let loginSchool0 = domain.split(\"@\")\n            let loginSchool = loginSchool0[0]\n\n            console.log(\"dans getlist ressource user avec comme email:\")\n            console.log(email)\n            //var tmp = record.school;\n          //  if (tmp == .toLowerCase()) {\n          let n = record.school.includes(loginSchool);\n          if (n){\n\n\n            newData.push({\n              id: record._id,\n              email: record.email,\n              school: record.school,\n              role: record.role\n            });\n            }\n          });\n          console.log(\"ressource =====\")\n          console.log(resource)\n          console.log(`Data returned from data provider in getList:`);\n          console.log(JSON.stringify(newData, null, 8));\n          return { data: newData, total: newData.length };\n        });\n    }\n  },\n  getMany: (resource, params) => dataProvider.getMany(resource, params),\n  updateMany: (resource, params) => dataProvider.updateMany(resource, params),\n  create: (resource, params) => {\n    if (resource === \"checkpoint\")\n {\n    //if (params.hasOwnProperty('location')) {console.log(\"OUAIS ELLE LA LOCATION!!!\")}\n      console.log(\"sa rentre dans create check point avec les params suivant\")\n      console.log(params)\n\n   console.log(\"jessaie de creer un checkpoint et mes params sont :\")\n   console.log(JSON.stringify(params, null, 8))\n\n }\n else if (resource === \"user\")\n{\n  resource = resource + \"/signup\"\n}\n    console.log(\"param de create :\");\n    console.log(params);\n    return dataProvider.create(resource, params)\n  },\n  delete: (resource, params) => dataProvider.delete(resource, params),\n  deleteMany: (resource, params) => dataProvider.deleteMany(resource, params),\n\n\n\n\n\n\n\n      getManyReference: (resource, params) => {\n          const { page, perPage } = params.pagination;\n          const { field, order } = params.sort;\n          const query = {\n              sort: JSON.stringify([field, order]),\n              range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n              filter: JSON.stringify({\n                  ...params.filter,\n                  [params.target]: params.id,\n              }),\n          };\n          const apiUrl = \"https://findar-api-staging.herokuapp.com\"\n          const url = `${apiUrl}/${resource}`;\n          //const url = `${apiUrl}/${resource}?floor=2`;\n\n          return dataProvider.httpClient(url).then(({ headers, json }) => ({\n              zebi: json,\n              total: parseInt(headers.get('content-range').split('/').pop(), 10),\n          }));\n      },\n  getOne: (resource, params) => {\n    if (params.id) {\n\n\n    console.log(\"LES PARAMETRE de GETONE SONT \")\n    console.log(params)\n    if (resource === \"user\" && params.hasOwnProperty('id') )\n    {  resource = resource + \"/profile\"  }\n    //else if (resource == \"checkpoint\" && params.hasOwnProperty('id') )\n    //{  resource = resource}\n\n    return dataProvider.getOne(resource, params).then(result => {\n\n\n      const newData = {\n        id: result.data._id,\n        email: result.data.email,\n        school: result.data.school,\n      };\n      console.log(`Data returned from data provider in getoooooooooOne:`);\n      console.log(JSON.stringify(newData, null, 8));\n      return { data: newData };\n    });\n    }\n  },\n  update: (resource, params) => {\n    console.log(\"SA REEEENTRE\")\n    console.log(\"Data provided by react-admin to data provider:\");\n    console.log(JSON.stringify(params, null, 8));\n    resource = resource + \"/profile\"\n    return dataProvider.update(resource, params);\n  }\n};\n\nexport default dataProviderWrapper;\n"]},"metadata":{},"sourceType":"module"}